#!/bin/bash

# Define path to custom hooks directory in your HOME
CUSTOM_HOOKS_DIR="$HOME/.config/git/hooks/scripts"

# Source the colors.sh file for color output
source "$CUSTOM_HOOKS_DIR/colors.sh"

# Pattern string to check for
PATTERN_STRING="^(feat|fix|build|chore|docs|style|refactor|perf|test)(\([^)]+\))?!?: (.+[^.\r\n])([\r\n]+(.+[\r\n]+)+)?$"

# Output message indicating the hook is running
printf "${CYAN}üõ†Ô∏è  Running commit-msg hook...${RESET}\n"

# Get commit message file
commit_msg_file=$1
commit_msg=$(cat "$commit_msg_file")

# Option to skip the hook
if echo "$commit_msg" | grep -iq "\[skip-hook\]"; then
    printf "${YELLOW}‚ö†Ô∏è  Skipping commit-msg hook as requested by [skip-hook] flag.${RESET}\n"
    exit 0
fi

# Check if commit message is empty
if [ -z "$commit_msg" ]; then
    printf "${RED}üö´ Commit message cannot be empty. Please provide a proper commit message.${RESET}\n"
    exit 1
fi

# Validate commit message against the pattern
if ! echo "$commit_msg" | grep -qE "$PATTERN_STRING"; then
    printf "${RED}üö´ Commit message does not follow the conventional format.${RESET}\n"
    printf "${YELLOW}Requested pattern is: type(scope): subject${RESET}\n"
    printf "Allowed types: feat, fix, build, chore, docs, style, refactor, perf, test\n"
    printf "${GREEN}Example: feat(auth): add support for OAuth login${RESET}\n"
    exit 1
fi

# Additional check for WIP messages to prevent unfinished work from being committed
if echo "$commit_msg" | grep -iq "wip"; then
    printf "${RED}üö´ Commit message contains 'WIP'. Please complete your work before committing.${RESET}\n"
    exit 1
fi

# Output message indicating the hook is done
printf "${GREEN}‚úÖ Done with commit-msg hook.${RESET}\n"
